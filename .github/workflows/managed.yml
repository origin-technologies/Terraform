name: 'ManagedIdentity'

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}      
  ARM_USE_MSI: true
  RESOURCE_GROUP: "rg-training-dev"
  STORAGE_ACCOUNT: "sampletraininguk"
  CONTAINER_NAME: "container1"  

defaults:
  run:
    working-directory: "./Folder/"

jobs:
  plan:
    name: 'Plan' 
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color --var-file=config.tfvars --out=deploy_plan.tfplan
      continue-on-error: false

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4.0.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update infrastructure
        title: 'Terraform plan'
        body: ${{ steps.deploy_plan.outputs.stdout }}
        labels: terraform, automated pr    

    # - name: PR Plan Deploy
    #   if: ${{ github.event_name == 'pull_request' }}
    #   uses: robburger/terraform-pr-commenter@v1
    #   with:
    #     commenter_type: plan
    #     commenter_input: ${{ format('{0}{1}', steps.deploy_plan.outputs.stdout, steps.deploy_plan.outputs.stderr) }}
    #     commenter_exitcode: ${{ steps.deploy_plan.outputs.exitcode }}

    - name: Compress TF Plan artifact
      shell: bash
      run: zip -r deploy.zip ./*
      # working-directory: ./Folder/

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: "${{ env.build_name }}-${{ github.run_number }}"
        path: "./Folder/${{ env.build_name }}-${{ github.run_number }}.zip"
        retention-days: 5

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
           let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
           github.issues.create({
             owner: context.repo.owner,
             repo: context.repo.repo,
             title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
             body: body
           });

  apply:
    needs: plan
    name: 'Apply'
    runs-on: self-hosted
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: "deploy"
        path: deploy/staging

    - name: Decompress TF Plan artifact
      shell: bash
      run: unzip ${{ env.build_name }}-${{ github.run_number }}.zip
      working-directory: deploy/staging

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.0

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"
      working-directory: deploy/staging

    - name: Terraform Apply Deploy
      shell: bash
      run: terraform apply deploy_plan.tfplan
      working-directory: deploy/staging